* {
  box-sizing: border-box;
}

[data-theme=dark] {
  color-scheme: dark only;
}
[data-theme=light],
html {
  color-scheme: light only;
}


[aria-pressed=true] path:nth-of-type(1) {
  display: none;
}
[aria-pressed=false] path:nth-of-type(2) {
  display: none;
}

header {
  position: relative;
}



body {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 98vh;
  background: canvas;
  color: canvasText;
  align-content: center;
}

body::before {
  --size: 30px;
  --line: color-mix(in lch, canvasText, transparent 85%);
  content: '';
  height: 100vh;
  width: 100vw;
  position: fixed;
  background: radial-gradient(4px 4px at 50% 50%,
        var(--line) 2px,
        transparent 2px var(--size)
      )
      50% 50% / var(--size) var(--size);
  mask: linear-gradient(-25deg, transparent 30%, white);
  top: 0;
  transform-style: flat;
  pointer-events: none;
  z-index: -1;
}

p {
  width: 60ch;
  max-width: calc(100% - 2rem);
}

h1 {
  font-size: clamp(3rem, 7vw + 1rem, 5rem);
  text-wrap: balance;
  margin-bottom: 2rem;
  
}
h2 {
  font-size: clamp(1rem, 7vw + 1rem, 2rem);
  margin-top: -10px;
  
}

:root {
  --size: 45px;
  --line: color-mix(in lch, white, transparent 85%);
  background: linear-gradient(
        90deg,
        var(--line) 1px,
        transparent 1px var(--size)
      )
      50% 50% / var(--size) var(--size),
    linear-gradient(var(--line) 1px, transparent 1px var(--size)) 50% 50% /
      var(--size) var(--size), hwb(216 37% 61%);
}



::view-transition-new(body),
::view-transition-old(body) {
  animation: pan 1s ease-in-out;
  backface-visibility: hidden;
  box-shadow: 2.2px 61.3px 73.1px -2px hsl(0 0% 0% / 0.58);
}

::view-transition-new(body) {
  --sr: 180deg;
  background: canvas;
}

::view-transition-old(body) {
  --sr: 0deg;
  backface-visibility: hidden;
}

body {
  view-transition-name: body;
}

@keyframes pan {
  0% {
    transform: scale(1) rotateY(var(--sr));
  }
  25% {
    transform: scale(0.5) rotateY(var(--sr));
    box-shadow: 1.8px 50.7px 51.4px -3.2px hsl(0 0% 0% / 0.32);
  }
  75% {
    transform: scale(0.5) rotateY(calc(var(--sr) + 180deg));
    box-shadow: 1.8px 50.7px 51.4px -3.2px hsl(0 0% 0% / 0.32);
  }
  100% {
    transform: scale(1) rotateY(calc(var(--sr) + 180deg));
  }
}

:root {
  view-transition-name: none;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

[aria-pressed] {
  position: fixed;
  top: 1rem;
  right: 1rem;
  width: 48px;
  aspect-ratio: 1;
  padding: 0;
  border: 0;
  margin: 0;
  display: grid;
  place-items: center;
  border-radius: 6px;
  transition: background 0.2;
  cursor: pointer;
  background-color: color-mix(in lch, canvas, canvasText calc(var(--intent) * 15%));
}

button svg {
  width: 50%;
}

button:is(:focus-visible, :hover) {
  --intent: 1;
}

main {
  width: 600px;
  max-width: calc(100% - 2rem);
}

.bear-link {
  color: canvasText;
  position: fixed;
  top: 1rem;
  left: 1rem;
  width: 48px;
  aspect-ratio: 1;
  display: grid;
  place-items: center;
  opacity: 0.8;
}

:where(.x-link, .bear-link):is(:hover, :focus-visible) {
  opacity: 1;
}
.bear-link svg {
  width: 75%;
}

.typing-effect {
  display: inline-block;
  overflow: hidden;
  white-space: nowrap;
  border-right: .15em solid #ffffff; 
  animation: typing 2s steps(18, end), blink-caret .75s step-end infinite;
}

@keyframes typing {
  from { width: 0; }
  to { width: 18ch; } /* 18 caracteres, incluyendo el espacio */
}

@keyframes blink-caret {
  from, to { border-color: transparent; }
  50% { border-color: #d8c7c7; }
}

/* Botón existente */
button {
  /* Variables */
  --button_radius: 0.75em;
  --button_color: #e8e8e8;
  --button_outline_color: #000000;
  font-size: 17px;
  font-weight: bold;
  border: none;
  cursor: pointer;
  border-radius: var(--button_radius);
  background: var(--button_outline_color);
}

.button_top {
  display: block;
  box-sizing: border-box;
  border: 2px solid var(--button_outline_color);
  border-radius: var(--button_radius);
  padding: 0.75em 1.5em;
  background: var(--button_color);
  color: var(--button_outline_color);
  transform: translateY(-0.2em);
  transition: transform 0.1s ease;
}

button:hover .button_top {
  /* Pull the button upwards when hovered */
  transform: translateY(-0.33em);
}

button:active .button_top {
  /* Push the button downwards when pressed */
  transform: translateY(0);
}

/* Contenedor para centrar el botón */
.button-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 10vh; /* Ocupa toda la altura de la pantalla */
  text-align: center; /* Asegura que el contenido esté centrado horizontalmente */
}





